





Parameters:
  stackName:   {Type: String}
  bucketName:  {Type: String}
  zipfileName: {Type: String}

Resources:

  # Gives the lambda function permission
  # to save logs to CloudWatch and to
  # access database
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: [sts:AssumeRole]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess


  # Gives the API Gateway permission
  # to invoke the lambda function.
  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com

  # We use a single AWS Lambda function to
  # respond to most API calls. Anything that
  # requires interaction with the database
  # goes through this same function. The
  # function acts based on the URL resource
  # and the HTTP method used.
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: lambdafunction.process
      Role: !GetAtt LambdaFunctionRole.Arn
      FunctionName:  !Join ['-', [!Ref stackName, 'lambda-function']]
      Code: 
        S3Bucket: !Ref bucketName
        S3Key: !Ref zipfileName
      Environment:
        Variables:
          StackName: !Ref stackName

