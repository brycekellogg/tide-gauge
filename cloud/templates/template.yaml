#
#
# +-------------+       +-------------+       +--------+       +----------+
# |             |       |             |       |        |       |          |
# | Particle.io |<----->| API Gateway |<----->| Lambda |<----->| DynamoDB |
# |             |       |             |       |        |       |          |
# +-------------+       +-------------+       +--------+       +----------+
#       ^                       ^
#       |                      |
#       |                      |
#       |                      |
#       v                      v
#   +--------+             +--------+
#   | Sensor |             | Client |
#   +--------+             +--------+
#
#
#
#
#
Parameters:

  # The source for each substack template is a URL
  # pointing to a resource on AWS S3. We pass in the
  # actual URLs via these CloudFormation parameters.
  databaseTemplateURL:   {Type: String}
  apiGatewayTemplateURL: {Type: String}
  lambdaTemplateURL:     {Type: String}

  # The lambda uses the bucket name and
  # the name of the zipfile to locate
  # the python code.
  bucketName:  {Type: String}
  zipfileName: {Type: String}

Resources:

  # TODO: ????
  StackDatabase:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref databaseTemplateURL
      Parameters:
        stackName: !Ref AWS::StackName

  # TODO: ???
  StackLambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref lambdaTemplateURL
      Parameters: 
        stackName:   !Ref AWS::StackName
        bucketName:  !Ref bucketName
        zipfileName: !Ref zipfileName
      # Outputs:
      #   - 

  # TODO: ???
  StackApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref apiGatewayTemplateURL
      Parameters: 
        lambdaArn: {Fn::GetAtt: [StackLambda, Outputs.lambdaArn]}
      #   stackName:   !Ref AWS::StackName
      #   bucketName:  !Ref bucketName
      #   zipfileName: !Ref zipfileName
